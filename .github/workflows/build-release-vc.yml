# 2023-11-16 09:00
name: Build release VC

on:
#  push:
#    branches: [ master ]
#  pull_request:
#    branches: [ master ]
  workflow_dispatch:
    inputs:
      msbuild_cl_x64_release:
        default: true
        type: boolean
      msbuild_cl_x86_release:
        default: true
        type: boolean

env:
  PROG_NAME: "VirtualDUB"
  TAG_NAME: "VirtualDUB-release"
  Prog_version: "1.9.11"

jobs:
  build-msbuild:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        build: [ 
#                 msbuild_cl_x64_debug,
                 msbuild_cl_x64_release,
#                 msbuild_cl_x86_debug,
                 msbuild_cl_x86_release,
               ]
  
        include:
#          - { build: msbuild_cl_x64_debug,     compiler: msbuild_cl, arch: amd64,       platform_sln: x64,   platform_name: x64,   build_config: Debug }
          - { build: msbuild_cl_x64_release,   compiler: msbuild_cl, arch: amd64,       platform_sln: x64,   platform_name: x64,   build_config: Release }
#          - { build: msbuild_cl_x86_debug,     compiler: msbuild_cl, arch: amd64_x86,   platform_sln: Win32, platform_name: x86,   build_config: Debug }
          - { build: msbuild_cl_x86_release,   compiler: msbuild_cl, arch: amd64_x86,   platform_sln: Win32, platform_name: x86,   build_config: Release }

    steps:
      - name: Checkout source
        uses: deep-soft/checkout@v3

      - name: Get program version
        continue-on-error: false
        shell: bash
        run: |
          Prog_version=${{ env.Prog_Version}}
          Prod_version=$(grep PRODUCTVERSION "src/vdub/res/vdub.rc")
          echo "[$Prod_version]"
          Prod_version=$(grep PRODUCTVERSION "src/vdub/res/vdub.rc" | awk "{ print $2}" | tr "," ".")
          echo "VERSION=$Prod_version" >> $GITHUB_ENV

      - name: Print program version
        continue-on-error: false
        shell: bash
        run: |
          echo "Print program version"
          echo "Version:${{ env.VERSION }}"

      - name: Set MSVC environment
        uses: deep-soft/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Build (cl)
        working-directory: src
        run: msbuild -m /property:Configuration=${{ matrix.build_config }} /property:Platform=${{ matrix.platform_sln }} VirtualDub.sln

#       - name: Create zip
#         continue-on-error: true
#         working-directory: _build/vc/_output/product/${{ matrix.build_config }}.${{ matrix.platform_sln }}
#         run: |
#           dir ./
#           Compress-Archive . ../VirtualDUB.${{ matrix.build_config }}.${{ matrix.platform_sln }}.${{ env.VERSION }}.zip
#           dir ../

      - name: Sign Windows exe and dll files
        continue-on-error: true
        uses: deep-soft/code-sign-action@master
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.CERTNAME }}'
          folder: 'src/out/${{ matrix.build_config }}.${{ matrix.platform_sln }}'
          recursive: true

      - name: Create Zip Archive Release
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: 'VirtualDUB.${{ matrix.build_config }}.${{ matrix.platform_sln }}.${{ env.VERSION }}.zip'
          directory: 'src/out/${{ matrix.build_config }}.${{ matrix.platform_sln }}'
          exclusions: '*.map *.pdb'
          recursive_exclusions: '*.map *.pdb changelog *Bel.lng *Cze.lng *Ger.lng *Hun.lng *Ita.lng *Lit.lng *Pol.lng *Rus.lng *Sky.lng *Spa.lng *Ukr* *Bel.hlf *Cze.hlf *Ger.hlf *Hun.hlf *Ita.hlf *Lit.hlf *Pol.hlf *Rus.hlf *Sky.hlf *Spa.hlf *Ukr*'
          path: '.'

      - name: Upload zip
        continue-on-error: true
        uses: deep-soft/upload-artifact@main
        with:
          name: VirtualDUB.${{ matrix.build_config }}.${{ matrix.platform_name }}.${{ env.VERSION }}.zip
          #path: _build/vc/_output/product/${{ matrix.build_config }}.${{ matrix.platform_sln }}/VirtualDUB.${{ matrix.build_config }}.${{ matrix.platform_sln }}.${{ env.VERSION }}.zip
          path: ${{ env.ZIP_RELEASE_ARCHIVE }}

#      - name: Upload folder
#        continue-on-error: true
#        uses: deep-soft/upload-artifact@main
#        with:
#          name: VirtualDUB.${{ matrix.build_config }}.${{ matrix.platform_name }}
#          path: _build/vc/_output/product/${{ matrix.build_config }}.${{ matrix.platform_sln }}

#      - name: Create list file
#        continue-on-error: true
#        shell: bash
#        run: |
#          list_file="VirtualDUB.${{ matrix.build }}-${{ matrix.compiler }}-${{ matrix.arch }}-${{ matrix.platform_sln }}-${{ matrix.platform_name }}-${{ matrix.build_config }}.txt"
#          ls -lR > $list_file
#          echo "LIST_File=$list_file" >> $GITHUB_ENV

      - name: Publish
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}-${{ env.VERSION }}
#          files: |
#            ${{ env.LIST_File }}
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Prepare latest Release
        continue-on-error: false
        shell: bash
        run: |
          mv ${{ env.ZIP_RELEASE_ARCHIVE }} ${{ env.PROG_NAME }}.${{ matrix.platform_name }}.zip
          echo "${{ env.VERSION }}" > ${{ env.PROG_NAME }}-latest.txt

      - name: Publish latest Release
        continue-on-error: false
        uses: deep-soft/action-gh-release@v1
        with:
          draft: false
          tag_name: ${{ env.PROG_NAME }}-latest
          body: "${{ env.PROG_NAME }} latest: v${{ env.VERSION }}"
          files: |
            ${{ env.PROG_NAME }}.${{ matrix.platform_name }}.zip
            ${{ env.PROG_NAME }}-latest.txt
